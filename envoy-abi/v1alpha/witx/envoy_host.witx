;; ABI implemented by Envoy itself (as a host of Wasm extensions).
;;
;; This is a `witx` file. See [here](https://github.com/WebAssembly/WASI/tree/master/docs/witx.md)
;; for an explanation of what that means.

(use "typenames.witx")

(module $envoy

  ;;; Linear memory to be accessed by ABI functions that need it.
  (import "memory" (memory))

  ;;; Configuration and Status.

  ;;; extern "C" WasmResult proxy_get_configuration(const char** configuration_ptr,
  ;;;                                               size_t* configuration_size);
  ;;; TODO(docs)
  (@interface func (export "proxy_get_configuration")
    ;;; TODO(docs)
    (param $config (@witx pointer (@witx pointer char8)))
    ;;; TODO(docs)
    (param $config_len (@witx pointer $size))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_get_status(uint32_t* status_code_ptr, const char** message_ptr,
  ;;;                                        size_t* message_size);
  ;;; Results status details for any previous ABI call and onGrpcClose.
  (@interface func (export "proxy_get_status")
    ;;; TODO(docs)
    (param $code (@witx pointer $wasm_result))
    ;;; TODO(docs)
    (param $message (@witx pointer (@witx pointer char8)))
    ;;; TODO(docs)
    (param $message_len (@witx pointer $size))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; Logging

  ;;; extern "C" WasmResult proxy_log(LogLevel level, const char* logMessage, size_t messageSize);
  ;;; TODO(docs)
  (@interface func (export "proxy_log")
    ;;; TODO(docs)
    (param $level $log_level)
    ;;; TODO(docs)
    (param $message string)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; Timer

  ;;; extern "C" WasmResult proxy_set_tick_period_milliseconds(uint32_t millisecond);
  ;;; Timer (must be called from a root context, e.g. onStart, onTick).
  (@interface func (export "proxy_set_tick_period_milliseconds")
    ;;; TODO(docs)
    (param $period_millis u32)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; Time

  ;;; extern "C" WasmResult proxy_get_current_time_nanoseconds(uint64_t* nanoseconds);
  ;;; TODO(docs)
  (@interface func (export "proxy_get_current_time_nanoseconds")
    ;;; TODO(docs)
    (param $time (@witx pointer $timestamp))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; State accessors

  ;;; extern "C" WasmResult proxy_get_property(const char* path_ptr, size_t path_size,
  ;;;                                          const char** value_ptr_ptr, size_t* value_size_ptr);
  ;;; TODO(docs)
  (@interface func (export "proxy_get_property")
    ;;; TODO(docs)
    (param $path string)
    ;;; TODO(docs)
    (param $value (@witx pointer (@witx pointer char8)))
    ;;; TODO(docs)
    (param $value_len (@witx pointer $size))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_set_property(const char* path_ptr, size_t path_size,
  ;;;                                          const char* value_ptr, size_t value_size);
  ;;; TODO(docs)
  (@interface func (export "proxy_set_property")
    ;;; TODO(docs)
    (param $path string)
    ;;; TODO(docs)
    (param $value string)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; System

  ;;; extern "C" WasmResult proxy_set_effective_context(uint32_t effective_context_id);
  ;;; TODO(docs)
  (@interface func (export "proxy_set_effective_context")
    ;;; TODO(docs)
    (param $id $context_id)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_done();
  ;;; TODO(docs)
  (@interface func (export "proxy_done")
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; Metrics

  ;;; extern "C" WasmResult proxy_define_metric(MetricType type, const char* name_ptr, size_t name_size,
  ;;;                                           uint32_t* metric_id);
  ;;; TODO(docs)
  (@interface func (export "proxy_define_metric")
    ;;; TODO(docs)
    (param $metric_type $metric_type)
    ;;; TODO(docs)
    (param $name string)
    ;;; TODO(docs)
    (param $id (@witx pointer $metric_id))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_increment_metric(uint32_t metric_id, int64_t offset);
  ;;; TODO(docs)
  (@interface func (export "proxy_increment_metric")
    ;;; TODO(docs)
    (param $id $metric_id)
    ;;; TODO(docs)
    (param $offset s64)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_record_metric(uint32_t metric_id, uint64_t value);
  ;;; TODO(docs)
  (@interface func (export "proxy_record_metric")
    ;;; TODO(docs)
    (param $id $metric_id)
    ;;; TODO(docs)
    (param $value u64)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_get_metric(uint32_t metric_id, uint64_t* result);
  ;;; TODO(docs)
  (@interface func (export "proxy_get_metric")
    ;;; TODO(docs)
    (param $id $metric_id)
    ;;; TODO(docs)
    (param $value (@witx pointer u64))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; Continue/Reply/Route

  ;;; extern "C" WasmResult proxy_continue_request();
  ;;; TODO(docs)
  (@interface func (export "proxy_continue_request")
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_continue_response();
  ;;; TODO(docs)
  (@interface func (export "proxy_continue_response")
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult
  ;;; proxy_send_local_response(uint32_t response_code, const char* response_code_details_ptr,
  ;;;                           size_t response_code_details_size, const char* body_ptr, size_t body_size,
  ;;;                           const char* additional_response_header_pairs_ptr,
  ;;;                           size_t additional_response_header_pairs_size, uint32_t grpc_status);
  ;;; TODO(docs)
  (@interface func (export "proxy_send_local_response")
    ;;; TODO(docs)
    (param $response_code u32)
    ;;; TODO(docs)
    (param $response_code_details string)
    ;;; TODO(docs)
    (param $body string)
    ;;; TODO(docs)
    (param $additional_response_header_pairs string)
    ;;; TODO(docs)
    (param $grpc_status $grpc_status)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_clear_route_cache();
  ;;; TODO(docs)
  (@interface func (export "proxy_clear_route_cache")
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; SharedData

  ;;; extern "C" WasmResult proxy_get_shared_data(const char* key_ptr, size_t key_size,
  ;;;                                             const char** value_ptr, size_t* value_size,
  ;;;                                             uint32_t* cas);
  ;;; Returns: Ok, NotFound
  ;;; TODO(docs)
  (@interface func (export "proxy_get_shared_data")
    ;;; TODO(docs)
    (param $key string)
    ;;; TODO(docs)
    (param $value (@witx pointer (@witx pointer char8)))
    ;;; TODO(docs)
    (param $value_len (@witx pointer $size))
    ;;; TODO(docs)
    (param $cas (@witx pointer u32))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_set_shared_data(const char* key_ptr, size_t key_size,
  ;;;                                             const char* value_ptr, size_t value_size, uint32_t cas);
  ;;; //  If cas != 0 and cas != the current cas for 'key' return false, otherwise set the value and
  ;;; //  return true.
  ;;; // Returns: Ok, CasMismatch
  ;;; TODO(docs)
  (@interface func (export "proxy_set_shared_data")
    ;;; TODO(docs)
    (param $key string)
    ;;; TODO(docs)
    (param $value string)
    ;;; TODO(docs)
    (param $cas u32)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; SharedQueue

  ;;; extern "C" WasmResult proxy_register_shared_queue(const char* queue_name_ptr,
  ;;;                                                   size_t queue_name_size, uint32_t* token);
  ;;; // Note: Registering the same queue_name will overwrite the old registration while preseving any
  ;;; // pending data. Consequently it should typically be followed by a call to
  ;;; // proxy_dequeue_shared_queue. Returns: Ok
  ;;; TODO(docs)
  (@interface func (export "proxy_register_shared_queue")
    ;;; TODO(docs)
    (param $queue_name string)
    ;;; TODO(docs)
    (param $token (@witx pointer $token))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_resolve_shared_queue(const char* vm_id, size_t vm_id_size,
  ;;;                                                  const char* queue_name_ptr, size_t queue_name_size,
  ;;;                                                  uint32_t* token);
  ;;; // Returns: Ok, NotFound
  ;;; TODO(docs)
  (@interface func (export "proxy_resolve_shared_queue")
    ;;; TODO(docs)
    (param $vm_id string)
    ;;; TODO(docs)
    (param $queue_name string)
    ;;; TODO(docs)
    (param $token (@witx pointer $token))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_dequeue_shared_queue(uint32_t token, const char** data_ptr,
  ;;;                                                  size_t* data_size);
  ;;; // Returns Ok, Empty, NotFound (token not registered).
  ;;; TODO(docs)
  (@interface func (export "proxy_dequeue_shared_queue")
    ;;; TODO(docs)
    (param $token $token)
    ;;; TODO(docs)
    (param $data (@witx pointer (@witx pointer char8)))
    ;;; TODO(docs)
    (param $data_len (@witx pointer $size))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_enqueue_shared_queue(uint32_t token, const char* data_ptr,
  ;;;                                                  size_t data_size);
  ;;; // Returns false if the queue was not found and the data was not enqueued.
  ;;; TODO(docs)
  (@interface func (export "proxy_enqueue_shared_queue")
    ;;; TODO(docs)
    (param $token $token)
    ;;; TODO(docs)
    (param $data string)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; Headers/Trailers/Metadata Maps

  ;;; extern "C" WasmResult proxy_add_header_map_value(HeaderMapType type, const char* key_ptr,
  ;;;                                                  size_t key_size, const char* value_ptr,
  ;;;                                                  size_t value_size);
  ;;; TODO(docs)
  (@interface func (export "proxy_add_header_map_value")
    ;;; TODO(docs)
    (param $headers_type $headers_type)
    ;;; TODO(docs)
    (param $key string)
    ;;; TODO(docs)
    (param $value string)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_get_header_map_value(HeaderMapType type, const char* key_ptr,
  ;;;                                                  size_t key_size, const char** value_ptr,
  ;;;                                                  size_t* value_size);
  ;;; TODO(docs)
  (@interface func (export "proxy_get_header_map_value")
    ;;; TODO(docs)
    (param $headers_type $headers_type)
    ;;; TODO(docs)
    (param $key string)
    ;;; TODO(docs)
    (param $value (@witx pointer (@witx pointer char8)))
    ;;; TODO(docs)
    (param $value_len (@witx pointer $size))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_get_header_map_pairs(HeaderMapType type, const char** ptr,
  ;;;                                                  size_t* size);
  ;;; TODO(docs)
  (@interface func (export "proxy_get_header_map_pairs")
    ;;; TODO(docs)
    (param $headers_type $headers_type)
    ;;; TODO(docs)
    (param $buf (@witx pointer (@witx pointer char8)))
    ;;; TODO(docs)
    (param $buf_len (@witx pointer $size))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_set_header_map_pairs(HeaderMapType type, const char* ptr, size_t size);
  ;;; TODO(docs)
  (@interface func (export "proxy_set_header_map_pairs")
    ;;; TODO(docs)
    (param $headers_type $headers_type)
    ;;; TODO(docs)
    (param $buf string)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_replace_header_map_value(HeaderMapType type, const char* key_ptr,
  ;;;                                                      size_t key_size, const char* value_ptr,
  ;;;                                                      size_t value_size);
  ;;; TODO(docs)
  (@interface func (export "proxy_replace_header_map_value")
    ;;; TODO(docs)
    (param $headers_type $headers_type)
    ;;; TODO(docs)
    (param $key string)
    ;;; TODO(docs)
    (param $value string)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_remove_header_map_value(HeaderMapType type, const char* key_ptr,
  ;;;                                                     size_t key_size);
  ;;; TODO(docs)
  (@interface func (export "proxy_remove_header_map_value")
    ;;; TODO(docs)
    (param $headers_type $headers_type)
    ;;; TODO(docs)
    (param $key string)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_get_header_map_size(HeaderMapType type, size_t* size);
  ;;; TODO(docs)
  (@interface func (export "proxy_get_header_map_size")
    ;;; TODO(docs)
    (param $headers_type $headers_type)
    ;;; TODO(docs)
    (param $len (@witx pointer $map_size))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; Buffer

  ;;; extern "C" WasmResult proxy_get_buffer_bytes(BufferType type, uint32_t start, uint32_t length,
  ;;;                                              const char** ptr, size_t* size);
  ;;; TODO(docs)
  (@interface func (export "proxy_get_buffer_bytes")
    ;;; TODO(docs)
    (param $buffer_type $buffer_type)
    ;;; TODO(docs)
    (param $start u32)
    ;;; TODO(docs)
    (param $length u32)
    ;;; TODO(docs)
    (param $buf (@witx pointer (@witx pointer char8)))
    ;;; TODO(docs)
    (param $buf_len (@witx pointer $size))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_get_buffer_status(BufferType type, size_t* length_ptr,
  ;;;                                               uint32_t* flags_ptr);
  ;;; TODO(docs)
  (@interface func (export "proxy_get_buffer_status")
    ;;; TODO(docs)
    (param $buffer_type $buffer_type)
    ;;; TODO(docs)
    (param $len (@witx pointer u32))
    ;;; TODO(docs)
    (param $flags (@witx pointer $buffer_flags))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; HTTP

  ;;; extern "C" WasmResult proxy_http_call(const char* uri_ptr, size_t uri_size, void* header_pairs_ptr,
  ;;;                                       size_t header_pairs_size, const char* body_ptr,
  ;;;                                       size_t body_size, void* trailer_pairs_ptr,
  ;;;                                       size_t trailer_pairs_size, uint32_t timeout_milliseconds,
  ;;;                                       uint32_t* token_ptr);
  ;;; TODO(docs)
  (@interface func (export "proxy_http_call")
    ;;; TODO(docs)
    (param $uri string)
    ;;; TODO(docs)
    (param $header_pairs string)
    ;;; TODO(docs)
    (param $body string)
    ;;; TODO(docs)
    (param $trailer_pairs string)
    ;;; TODO(docs)
    (param $timeout_ms u32)
    ;;; TODO(docs)
    (param $token (@witx pointer $token))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; gRPC

  ;;; extern "C" WasmResult proxy_grpc_call(const char* service_ptr, size_t service_size,
  ;;;                                       const char* service_name_ptr, size_t service_name_size,
  ;;;                                       const char* method_name_ptr, size_t method_name_size,
  ;;;                                       const char* request_ptr, size_t request_size,
  ;;;                                       uint32_t timeout_milliseconds, uint32_t* token_ptr);
  ;;; TODO(docs)
  (@interface func (export "proxy_grpc_call")
    ;;; TODO(docs)
    (param $service string)
    ;;; TODO(docs)
    (param $service_name string)
    ;;; TODO(docs)
    (param $method_name string)
    ;;; TODO(docs)
    (param $request string)
    ;;; TODO(docs)
    (param $timeout_ms u32)
    ;;; TODO(docs)
    (param $token (@witx pointer $token))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_grpc_stream(const char* service_ptr, size_t service_size,
  ;;;                                         const char* service_name_ptr, size_t service_name_size,
  ;;;                                         const char* method_name_ptr, size_t method_name_size,
  ;;;                                         uint32_t* token_ptr);
  ;;; TODO(docs)
  (@interface func (export "proxy_grpc_stream")
    ;;; TODO(docs)
    (param $service string)
    ;;; TODO(docs)
    (param $service_name string)
    ;;; TODO(docs)
    (param $method_name string)
    ;;; TODO(docs)
    (param $token (@witx pointer $token))
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_grpc_cancel(uint32_t token);
  ;;; TODO(docs)
  (@interface func (export "proxy_grpc_cancel")
    ;;; TODO(docs)
    (param $token $token)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_grpc_close(uint32_t token);
  ;;; TODO(docs)
  (@interface func (export "proxy_grpc_close")
    ;;; TODO(docs)
    (param $token $token)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )

  ;;; extern "C" WasmResult proxy_grpc_send(uint32_t token, const char* message_ptr, size_t message_size,
  ;;;                                       uint32_t end_stream);
  ;;; TODO(docs)
  (@interface func (export "proxy_grpc_send")
    ;;; TODO(docs)
    (param $token $token)
    ;;; TODO(docs)
    (param $message string)
    ;;; TODO(docs)
    (param $end_stream $boolean)
    ;;; TODO(docs)
    (result $error $wasm_result)
  )
)
