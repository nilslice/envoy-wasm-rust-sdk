;; ABI implemented by Envoy Wasm extensions.
;;
;; This is a `witx` file. See [here](https://github.com/WebAssembly/WASI/tree/master/docs/witx.md)
;; for an explanation of what that means.

(use "typenames.witx")

(module $envoy_extension

  ;;; Linear memory to be accessed by ABI functions that need it.
  (import "memory" (memory))

  ;;; Calls in.

  ;;; extern "C" uint32_t proxy_on_start(uint32_t root_context_id, uint32_t configuration_size);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_start")
    ;;; TODO(docs)
    (param $root_context_id $context_id)
    ;;; TODO(docs)
    (param $configuration_len $size)
    ;;; TODO(docs)
    (result $result u32)
  )

  ;;; extern "C" uint32_t proxy_validate_configuration(uint32_t root_context_id,
  ;;;                                                  uint32_t configuration_size);
  ;;; TODO(docs)
  (@interface func (export "proxy_validate_configuration")
    ;;; TODO(docs)
    (param $root_context_id $context_id)
    ;;; TODO(docs)
    (param $configuration_len $size)
    ;;; TODO(docs)
    (result $result u32)
  )

  ;;; extern "C" uint32_t proxy_on_configure(uint32_t root_context_id, uint32_t configuration_size);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_configure")
    ;;; TODO(docs)
    (param $root_context_id $context_id)
    ;;; TODO(docs)
    (param $configuration_len $size)
    ;;; TODO(docs)
    (result $result u32)
  )

  ;;; extern "C" void proxy_on_tick(uint32_t root_context_id);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_tick")
    ;;; TODO(docs)
    (param $root_context_id $context_id)
  )

  ;;; extern "C" void proxy_on_queue_ready(uint32_t root_context_id, uint32_t token);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_queue_ready")
    ;;; TODO(docs)
    (param $root_context_id $context_id)
    ;;; TODO(docs)
    (param $token $token)
  )

  ;;; Stream calls.

  ;;; extern "C" void proxy_on_create(uint32_t context_id, uint32_t root_context_id);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_create")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $root_context_id $context_id)
  )

  ;;; Network calls.

  ;;; extern "C" FilterStatus proxy_on_new_connection(uint32_t context_id);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_new_connection")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (result $status $filter_status)
  )

  ;;; extern "C" FilterStatus proxy_on_downstream_data(uint32_t context_id,
  ;;;                                                  uint32_t data_length,
  ;;;                                                  uint32_t end_of_stream);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_downstream_data")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $data_len $size)
    ;;; TODO(docs)
    (param $end_of_stream $boolean)
    ;;; TODO(docs)
    (result $status $filter_status)
  )

  ;;; extern "C" FilterStatus proxy_on_upstream_data(uint32_t context_id,
  ;;;                                                uint32_t data_length,
  ;;;                                                uint32_t end_of_stream);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_upstream_data")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $data_len $size)
    ;;; TODO(docs)
    (param $end_of_stream $boolean)
    ;;; TODO(docs)
    (result $status $filter_status)
  )

  ;;; extern "C" void proxy_on_downstream_connection_close(uint32_t context_id,
  ;;;                                                      uint32_t peer_type);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_downstream_connection_close")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $peer $peer_type)
  )

  ;;; extern "C" void proxy_on_upstream_connection_close(uint32_t context_id,
  ;;;                                                    uint32_t peer_type);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_upstream_connection_close")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $peer $peer_type)
  )

  ;;; HTTP calls.

  ;;; extern "C" FilterHeadersStatus proxy_on_request_headers(uint32_t context_id, uint32_t headers);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_request_headers")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $headers_count $map_size)
    ;;; TODO(docs)
    (result $status $filter_headers_status)
  )

  ;;; extern "C" FilterDataStatus proxy_on_request_body(uint32_t context_id, uint32_t body_buffer_length,
  ;;;                                                   uint32_t end_of_stream);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_request_body")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $body_buffer_length $size)
    ;;; TODO(docs)
    (param $end_of_stream $boolean)
    ;;; TODO(docs)
    (result $status $filter_data_status)
  )

  ;;; extern "C" FilterTrailersStatus proxy_on_request_trailers(uint32_t context_id, uint32_t trailers);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_request_trailers")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $trailers_count $map_size)
    ;;; TODO(docs)
    (result $status $filter_trailers_status)
  )

  ;;; extern "C" FilterMetadataStatus proxy_on_request_metadata(uint32_t context_id, uint32_t nelements);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_request_metadata")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $elements_count $map_size)
    ;;; TODO(docs)
    (result $status $filter_metadata_status)
  )

  ;;; extern "C" FilterHeadersStatus proxy_on_response_headers(uint32_t context_id, uint32_t headers);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_response_headers")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $headers_count $map_size)
    ;;; TODO(docs)
    (result $status $filter_headers_status)
  )

  ;;; extern "C" FilterDataStatus proxy_on_response_body(uint32_t context_id, uint32_t body_buffer_length,
  ;;;                                                    uint32_t end_of_stream);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_response_body")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $body_buffer_length $size)
    ;;; TODO(docs)
    (param $end_of_stream $boolean)
    ;;; TODO(docs)
    (result $status $filter_data_status)
  )

  ;;; extern "C" FilterTrailersStatus proxy_on_response_trailers(uint32_t context_id, uint32_t trailers);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_response_trailers")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $trailers_count $map_size)
    ;;; TODO(docs)
    (result $status $filter_trailers_status)
  )

  ;;; extern "C" FilterMetadataStatus proxy_on_response_metadata(uint32_t context_id, uint32_t nelements);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_response_metadata")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $elements_count $map_size)
    ;;; TODO(docs)
    (result $status $filter_metadata_status)
  )

  ;;; extern "C" uint32_t proxy_on_done(uint32_t context_id);
  ;;; The stream/vm has completed.
  (@interface func (export "proxy_on_done")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (result $result u32)
  )

  ;;; extern "C" void proxy_on_log(uint32_t context_id);
  ;;; proxy_on_log occurs after proxy_on_done.
  (@interface func (export "proxy_on_log")
    ;;; TODO(docs)
    (param $context_id $context_id)
  )

  ;;; extern "C" void proxy_on_delete(uint32_t context_id);
  ;;; The Context in the proxy has been destroyed and no further calls will be coming.
  (@interface func (export "proxy_on_delete")
    ;;; TODO(docs)
    (param $context_id $context_id)
  )

  ;;; HTTP.

  ;;; extern "C" void proxy_on_http_call_response(uint32_t context_id, uint32_t token, uint32_t headers,
  ;;;                                             uint32_t body_size, uint32_t trailers);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_http_call_response")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $token $token)
    ;;; TODO(docs)
    (param $headers_count $map_size)
    ;;; TODO(docs)
    (param $body_size $size)
    ;;; TODO(docs)
    (param $trailers_count $map_size)
  )

  ;;; gRPC.

  ;;; extern "C" void proxy_on_grpc_create_initial_metadata(uint32_t context_id, uint32_t token,
  ;;;                                                       uint32_t headers);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_grpc_create_initial_metadata")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $token $token)
    ;;; TODO(docs)
    (param $headers_count $map_size)
  )

  ;;; extern "C" void proxy_on_grpc_receive_initial_metadata(uint32_t context_id, uint32_t token,
  ;;;                                                        uint32_t headers);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_grpc_receive_initial_metadata")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $token $token)
    ;;; TODO(docs)
    (param $headers_count $map_size)
  )

  ;;; extern "C" void proxy_on_grpc_trailing_metadata(uint32_t context_id, uint32_t token,
  ;;;                                                 uint32_t trailers);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_grpc_trailing_metadata")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $token $token)
    ;;; TODO(docs)
    (param $trailers_count $map_size)
  )

  ;;; extern "C" void proxy_on_grpc_receive(uint32_t context_id, uint32_t token, uint32_t response_size);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_grpc_receive")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $token $token)
    ;;; TODO(docs)
    (param $response_size $size)
  )

  ;;; extern "C" void proxy_on_grpc_close(uint32_t context_id, uint32_t token, uint32_t status_code);
  ;;; TODO(docs)
  (@interface func (export "proxy_on_grpc_close")
    ;;; TODO(docs)
    (param $context_id $context_id)
    ;;; TODO(docs)
    (param $token $token)
    ;;; TODO(docs)
    (param $status_code $grpc_status)
  )
)
